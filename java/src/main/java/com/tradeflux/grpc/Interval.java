// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc/tradeflux.proto

package com.tradeflux.grpc;

/**
 * Protobuf enum {@code tradeflux.Interval}
 */
public enum Interval
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>INTERVAL_UNKNOWN = 0;</code>
   */
  INTERVAL_UNKNOWN(0),
  /**
   * <pre>
   * "1s"
   * </pre>
   *
   * <code>SEC_1 = 1;</code>
   */
  SEC_1(1),
  /**
   * <pre>
   * "1m"
   * </pre>
   *
   * <code>MINUTE_1 = 2;</code>
   */
  MINUTE_1(2),
  /**
   * <pre>
   * "3m"
   * </pre>
   *
   * <code>MINUTE_3 = 3;</code>
   */
  MINUTE_3(3),
  /**
   * <pre>
   * "5m"
   * </pre>
   *
   * <code>MINUTE_5 = 4;</code>
   */
  MINUTE_5(4),
  /**
   * <pre>
   * "15m"
   * </pre>
   *
   * <code>MINUTE_15 = 5;</code>
   */
  MINUTE_15(5),
  /**
   * <pre>
   * "30m"
   * </pre>
   *
   * <code>MINUTE_30 = 6;</code>
   */
  MINUTE_30(6),
  /**
   * <pre>
   * "1h"
   * </pre>
   *
   * <code>HOUR_1 = 7;</code>
   */
  HOUR_1(7),
  /**
   * <pre>
   * "2h"
   * </pre>
   *
   * <code>HOUR_2 = 8;</code>
   */
  HOUR_2(8),
  /**
   * <pre>
   * "4h"
   * </pre>
   *
   * <code>HOUR_4 = 9;</code>
   */
  HOUR_4(9),
  /**
   * <pre>
   * "6h"
   * </pre>
   *
   * <code>HOUR_6 = 10;</code>
   */
  HOUR_6(10),
  /**
   * <pre>
   * "8h"
   * </pre>
   *
   * <code>HOUR_8 = 11;</code>
   */
  HOUR_8(11),
  /**
   * <pre>
   * "12h"
   * </pre>
   *
   * <code>HOUR_12 = 12;</code>
   */
  HOUR_12(12),
  /**
   * <pre>
   * "1d"
   * </pre>
   *
   * <code>DAY_1 = 13;</code>
   */
  DAY_1(13),
  /**
   * <pre>
   * "3d"
   * </pre>
   *
   * <code>DAY_3 = 14;</code>
   */
  DAY_3(14),
  /**
   * <pre>
   * "1w"
   * </pre>
   *
   * <code>WEEK_1 = 15;</code>
   */
  WEEK_1(15),
  /**
   * <pre>
   * "1M"
   * </pre>
   *
   * <code>MONTH_1 = 16;</code>
   */
  MONTH_1(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>INTERVAL_UNKNOWN = 0;</code>
   */
  public static final int INTERVAL_UNKNOWN_VALUE = 0;
  /**
   * <pre>
   * "1s"
   * </pre>
   *
   * <code>SEC_1 = 1;</code>
   */
  public static final int SEC_1_VALUE = 1;
  /**
   * <pre>
   * "1m"
   * </pre>
   *
   * <code>MINUTE_1 = 2;</code>
   */
  public static final int MINUTE_1_VALUE = 2;
  /**
   * <pre>
   * "3m"
   * </pre>
   *
   * <code>MINUTE_3 = 3;</code>
   */
  public static final int MINUTE_3_VALUE = 3;
  /**
   * <pre>
   * "5m"
   * </pre>
   *
   * <code>MINUTE_5 = 4;</code>
   */
  public static final int MINUTE_5_VALUE = 4;
  /**
   * <pre>
   * "15m"
   * </pre>
   *
   * <code>MINUTE_15 = 5;</code>
   */
  public static final int MINUTE_15_VALUE = 5;
  /**
   * <pre>
   * "30m"
   * </pre>
   *
   * <code>MINUTE_30 = 6;</code>
   */
  public static final int MINUTE_30_VALUE = 6;
  /**
   * <pre>
   * "1h"
   * </pre>
   *
   * <code>HOUR_1 = 7;</code>
   */
  public static final int HOUR_1_VALUE = 7;
  /**
   * <pre>
   * "2h"
   * </pre>
   *
   * <code>HOUR_2 = 8;</code>
   */
  public static final int HOUR_2_VALUE = 8;
  /**
   * <pre>
   * "4h"
   * </pre>
   *
   * <code>HOUR_4 = 9;</code>
   */
  public static final int HOUR_4_VALUE = 9;
  /**
   * <pre>
   * "6h"
   * </pre>
   *
   * <code>HOUR_6 = 10;</code>
   */
  public static final int HOUR_6_VALUE = 10;
  /**
   * <pre>
   * "8h"
   * </pre>
   *
   * <code>HOUR_8 = 11;</code>
   */
  public static final int HOUR_8_VALUE = 11;
  /**
   * <pre>
   * "12h"
   * </pre>
   *
   * <code>HOUR_12 = 12;</code>
   */
  public static final int HOUR_12_VALUE = 12;
  /**
   * <pre>
   * "1d"
   * </pre>
   *
   * <code>DAY_1 = 13;</code>
   */
  public static final int DAY_1_VALUE = 13;
  /**
   * <pre>
   * "3d"
   * </pre>
   *
   * <code>DAY_3 = 14;</code>
   */
  public static final int DAY_3_VALUE = 14;
  /**
   * <pre>
   * "1w"
   * </pre>
   *
   * <code>WEEK_1 = 15;</code>
   */
  public static final int WEEK_1_VALUE = 15;
  /**
   * <pre>
   * "1M"
   * </pre>
   *
   * <code>MONTH_1 = 16;</code>
   */
  public static final int MONTH_1_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Interval valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Interval forNumber(int value) {
    switch (value) {
      case 0: return INTERVAL_UNKNOWN;
      case 1: return SEC_1;
      case 2: return MINUTE_1;
      case 3: return MINUTE_3;
      case 4: return MINUTE_5;
      case 5: return MINUTE_15;
      case 6: return MINUTE_30;
      case 7: return HOUR_1;
      case 8: return HOUR_2;
      case 9: return HOUR_4;
      case 10: return HOUR_6;
      case 11: return HOUR_8;
      case 12: return HOUR_12;
      case 13: return DAY_1;
      case 14: return DAY_3;
      case 15: return WEEK_1;
      case 16: return MONTH_1;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Interval>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Interval> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Interval>() {
          public Interval findValueByNumber(int number) {
            return Interval.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.tradeflux.grpc.Tradeflux.getDescriptor().getEnumTypes().get(0);
  }

  private static final Interval[] VALUES = values();

  public static Interval valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Interval(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:tradeflux.Interval)
}

